# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cQXq-lGhxTBFc9hPkkLEXHBKc5NYkzAI
"""

model =Sequenial()
model.add(Embeddieng(input_dim,
           output_dim,
           embeddings_regulaizer,
           input_length))

SimpleRNN(units,
          activation="tanch",
          use_bias=false,
          kernal_regulizer,
          dropout=0,0,
          go_backwards=false)

LSTM(units,
          activation="tanch",
          use_bias=false,
          dropout=0,0,
          go_backwards=false)

GRU(units,
          activation="tanch",
          use_bias=false,
          dropout=0,0,
          go_backwards=false)

model.add(Dense(15,activation='softmax'))

from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense, Dropout, Embedding, SimpleRNN
from keras.datasets import imdb
from keras.callbacks import TensorBoard

max_features = 5000
no_classes = 1
max_length = 100
batch_size = 64
embedding_size = 64
dropout_rate = 0.5
hidden_layer_size = 250
no_epochs = 5

(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)
print('Data loaded successfully.')
print('# Train Data = ', len(x_train))
print('# Test Data = ', len(x_test))

x_train = sequence.pad_sequences(x_train, maxlen=max_length)
x_test = sequence.pad_sequences(x_test, maxlen=max_length)

RNN_model = Sequential()
# Add Embedding layer

RNN_model.add(Embedding(max_features, embedding_size, input_length=max_length))
RNN_model.add(Dropout(dropout_rate))
# Add Simple RNN layer

RNN_model.add(SimpleRNN(20,activation="tanh"))
# Add Dense Hidden Layer

RNN_model.add(Dense(hidden_layer_size, activation='relu'))

RNN_model.add(Dropout(dropout_rate))

# Output Layer 
RNN_model.add(Dense(no_classes, activation='sigmoid'))

from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense, Dropout, Embedding, SimpleRNN
from keras.datasets import imdb
from keras.callbacks import TensorBoard

from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense, Dropout, Embedding, SimpleRNN
from keras.datasets import imdb
from keras.callbacks import TensorBoard

# Configure model
RNN_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

RNN_model.fit(x_train, y_train, batch_size=batch_size, verbose=2, epochs=no_epochs, validation_data=(x_test, y_test))